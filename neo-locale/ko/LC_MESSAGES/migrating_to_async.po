# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020, Rapptz
# This file is distributed under the same license as the discord.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord.py 1.4.0a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-27 13:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../migrating_to_async.rst:8
msgid "Migrating to v0.10.0"
msgstr "v0.10.0으로 이동"

#: ../../migrating_to_async.rst:10
msgid ""
"v0.10.0 is one of the biggest breaking changes in the library due to "
"massive fundamental changes in how the library operates."
msgstr "" 
"v0.10.0은 라이브러리가 작동하는 방식의 변화 때문에, "
"라이브러리에 가장 큰 변화가 이루어진 버전입니다."

#: ../../migrating_to_async.rst:13
msgid ""
"The biggest major change is that the library has dropped support to all "
"versions prior to Python 3.4.2. This was made to support :mod:`asyncio`, "
"in which more detail can be seen :issue:`in the corresponding issue "
"<50>`. To reiterate this, the implication is that **python version 2.7 "
"and 3.3 are no longer supported**."
msgstr ""
"가장 큰 변화는 라이브러리가 Python 3.4.2 버전 밑의 버전들을 지원하지 않는다는"
"것 입니다. 이것은 :mod:`asyncio`를 지원하기 위함인데, 더 자세하게 말하면, "
":issue:`통신, 응답 관련 문제` 때문입니다. 다시 말하자면, 결론적으로, ** " 
"Python 2.7과 3.3은 더이상 지원을 하지 않는다는 것 입니다."

#: ../../migrating_to_async.rst:18
msgid "Below are all the other major changes from v0.9.0 to v0.10.0."
msgstr "아래에 있는 내용은 v0.9.0에서 v0.10.0 사이에 일어난 큰 변화들 입니다."

#: ../../migrating_to_async.rst:21
msgid "Event Registration"
msgstr "이벤트 등록"

#: ../../migrating_to_async.rst:23
msgid ""
"All events before were registered using :meth:`Client.event`. While this "
"is still possible, the events must be decorated with "
"``@asyncio.coroutine``."
msgstr ""
"이벤트들은 :meth:`Client.event`로 먼저 등록이 됩니다. 그 사이에 이것은 "
"여전히 가능합니다 : 이벤트들은 ``@asyncio.coroutine`` 으로 데코레이팅 되야 합니다."

#: ../../migrating_to_async.rst:26 ../../migrating_to_async.rst:71
#: ../../migrating_to_async.rst:105 ../../migrating_to_async.rst:166
msgid "Before:"
msgstr "이전: "

#: ../../migrating_to_async.rst:34 ../../migrating_to_async.rst:83
#: ../../migrating_to_async.rst:111 ../../migrating_to_async.rst:174
#: ../../migrating_to_async.rst:284
msgid "After:"
msgstr "이후:"

#: ../../migrating_to_async.rst:43
msgid "Or in Python 3.5+:"
msgstr "또는 Python 3.5+ 에서:"

#: ../../migrating_to_async.rst:51
msgid ""
"Because there is a lot of typing, a utility decorator "
"(:meth:`Client.async_event`) is provided for easier registration. For "
"example:"
msgstr ""
"타이핑 해야할 것이 많이 때문에, 유틸리티 데코레이터인"
"(:meth:`Client.async_event`)가 편하게 등록을 하기 위해서 제공됩니다."
"예시 : "

#: ../../migrating_to_async.rst:61
msgid ""
"Be aware however, that this is still a coroutine and your other functions"
" that are coroutines must be decorated with ``@asyncio.coroutine`` or be "
"``async def``."
msgstr ""
"하지만 조심하세요, 그것은 아직도 코루틴이고, 당신의 다른 코루틴 "
"함수들은 반드시 ``@asyncio.coroutine``로 데코레이팅 되거나 "
"``async def`` 형식이여야 합니다."

#: ../../migrating_to_async.rst:65
msgid "Event Changes"
msgstr "이벤트 변화들"

#: ../../migrating_to_async.rst:67
msgid ""
"Some events in v0.9.0 were considered pretty useless due to having no "
"separate states. The main events that were changed were the ``_update`` "
"events since previously they had no context on what was changed."
msgstr ""

#: ../../migrating_to_async.rst:93
msgid ""
"Note that ``on_status`` was removed. If you want its functionality, use "
":func:`on_member_update`. See :ref:`discord-api-events` for more "
"information. Other removed events include ``on_socket_closed``, "
"``on_socket_receive``, and ``on_socket_opened``."
msgstr ""

#: ../../migrating_to_async.rst:98
msgid "Coroutines"
msgstr ""

#: ../../migrating_to_async.rst:100
msgid ""
"The biggest change that the library went through is that almost every "
"function in :class:`Client` was changed to be a `coroutine <py:library"
"/asyncio-task.html>`_. Functions that are marked as a coroutine in the "
"documentation must be awaited from or yielded from in order for the "
"computation to be done. For example..."
msgstr ""

#: ../../migrating_to_async.rst:120
msgid ""
"In order for you to ``yield from`` or ``await`` a coroutine then your "
"function must be decorated with ``@asyncio.coroutine`` or ``async def``."
msgstr ""

#: ../../migrating_to_async.rst:124
msgid "Iterables"
msgstr ""

#: ../../migrating_to_async.rst:126
msgid ""
"For performance reasons, many of the internal data structures were "
"changed into a dictionary to support faster lookup. As a consequence, "
"this meant that some lists that were exposed via the API have changed "
"into iterables and not sequences. In short, this means that certain "
"attributes now only support iteration and not any of the sequence "
"functions."
msgstr ""

#: ../../migrating_to_async.rst:131
msgid "The affected attributes are as follows:"
msgstr ""

#: ../../migrating_to_async.rst:133
msgid ":attr:`Client.servers`"
msgstr ""

#: ../../migrating_to_async.rst:134
msgid ":attr:`Client.private_channels`"
msgstr ""

#: ../../migrating_to_async.rst:135
msgid ":attr:`Server.channels`"
msgstr ""

#: ../../migrating_to_async.rst:136
msgid ":attr:`Server.members`"
msgstr ""

#: ../../migrating_to_async.rst:138
msgid "Some examples of previously valid behaviour that is now invalid"
msgstr ""

#: ../../migrating_to_async.rst:145
msgid ""
"Since they are no longer :obj:`list`\\s, they no longer support indexing "
"or any operation other than iterating. In order to get the old behaviour "
"you should explicitly cast it to a list."
msgstr ""

#: ../../migrating_to_async.rst:155
msgid ""
"Due to internal changes of the structure, the order you receive the data "
"in is not in a guaranteed order."
msgstr ""

#: ../../migrating_to_async.rst:159
msgid "Enumerations"
msgstr ""

#: ../../migrating_to_async.rst:161
msgid ""
"Due to dropping support for versions lower than Python 3.4.2, the library"
" can now use :doc:`py:library/enum` in places where it makes sense."
msgstr ""

#: ../../migrating_to_async.rst:164
msgid ""
"The common places where this was changed was in the server region, member"
" status, and channel type."
msgstr ""

#: ../../migrating_to_async.rst:182
msgid ""
"The main reason for this change was to reduce the use of finicky strings "
"in the API as this could give users a false sense of power. More "
"information can be found in the :ref:`discord-api-enums` page."
msgstr ""

#: ../../migrating_to_async.rst:186
msgid "Properties"
msgstr ""

#: ../../migrating_to_async.rst:188
msgid ""
"A lot of function calls that returned constant values were changed into "
"Python properties for ease of use in format strings."
msgstr ""

#: ../../migrating_to_async.rst:191
msgid "The following functions were changed into properties:"
msgstr ""

#: ../../migrating_to_async.rst:194 ../../migrating_to_async.rst:223
#: ../../migrating_to_async.rst:238
msgid "Before"
msgstr ""

#: ../../migrating_to_async.rst:194 ../../migrating_to_async.rst:223
#: ../../migrating_to_async.rst:238
msgid "After"
msgstr ""

#: ../../migrating_to_async.rst:196
msgid "``User.avatar_url()``"
msgstr ""

#: ../../migrating_to_async.rst:196
msgid ":attr:`User.avatar_url`"
msgstr ""

#: ../../migrating_to_async.rst:198
msgid "``User.mention()``"
msgstr ""

#: ../../migrating_to_async.rst:198
msgid ":attr:`User.mention`"
msgstr ""

#: ../../migrating_to_async.rst:200
msgid "``Channel.mention()``"
msgstr ""

#: ../../migrating_to_async.rst:200
msgid ":attr:`Channel.mention`"
msgstr ""

#: ../../migrating_to_async.rst:202
msgid "``Channel.is_default_channel()``"
msgstr ""

#: ../../migrating_to_async.rst:202
msgid ":attr:`Channel.is_default`"
msgstr ""

#: ../../migrating_to_async.rst:204
msgid "``Role.is_everyone()``"
msgstr ""

#: ../../migrating_to_async.rst:204
msgid ":attr:`Role.is_everyone`"
msgstr ""

#: ../../migrating_to_async.rst:206
msgid "``Server.get_default_role()``"
msgstr ""

#: ../../migrating_to_async.rst:206
msgid ":attr:`Server.default_role`"
msgstr ""

#: ../../migrating_to_async.rst:208
msgid "``Server.icon_url()``"
msgstr ""

#: ../../migrating_to_async.rst:208
msgid ":attr:`Server.icon_url`"
msgstr ""

#: ../../migrating_to_async.rst:210
msgid "``Server.get_default_channel()``"
msgstr ""

#: ../../migrating_to_async.rst:210
msgid ":attr:`Server.default_channel`"
msgstr ""

#: ../../migrating_to_async.rst:212
msgid "``Message.get_raw_mentions()``"
msgstr ""

#: ../../migrating_to_async.rst:212
msgid ":attr:`Message.raw_mentions`"
msgstr ""

#: ../../migrating_to_async.rst:214
msgid "``Message.get_raw_channel_mentions()``"
msgstr ""

#: ../../migrating_to_async.rst:214
msgid ":attr:`Message.raw_channel_mentions`"
msgstr ""

#: ../../migrating_to_async.rst:218
msgid "Member Management"
msgstr ""

#: ../../migrating_to_async.rst:220
msgid "Functions that involved banning and kicking were changed."
msgstr ""

#: ../../migrating_to_async.rst:225
msgid "``Client.ban(server, user)``"
msgstr ""

#: ../../migrating_to_async.rst:225
msgid "``Client.ban(member)``"
msgstr ""

#: ../../migrating_to_async.rst:227
msgid "``Client.kick(server, user)``"
msgstr ""

#: ../../migrating_to_async.rst:227
msgid "``Client.kick(member)``"
msgstr ""

#: ../../migrating_to_async.rst:233
msgid "Renamed Functions"
msgstr ""

#: ../../migrating_to_async.rst:235
msgid "Functions have been renamed."
msgstr ""

#: ../../migrating_to_async.rst:240
msgid "``Client.set_channel_permissions``"
msgstr ""

#: ../../migrating_to_async.rst:240 ../../migrating_to_async.rst:263
msgid ":meth:`Client.edit_channel_permissions`"
msgstr ""

#: ../../migrating_to_async.rst:243
msgid ""
"All the :class:`Permissions` related attributes have been renamed and the"
" `can_` prefix has been dropped. So for example, ``can_manage_messages`` "
"has become ``manage_messages``."
msgstr ""

#: ../../migrating_to_async.rst:247
msgid "Forced Keyword Arguments"
msgstr ""

#: ../../migrating_to_async.rst:249
msgid ""
"Since 3.0+ of Python, we can now force questions to take in forced "
"keyword arguments. A keyword argument is when you explicitly specify the "
"name of the variable and assign to it, for example: ``foo(name='test')``."
" Due to this support, some functions in the library were changed to force"
" things to take said keyword arguments. This is to reduce errors of "
"knowing the argument order and the issues that could arise from them."
msgstr ""

#: ../../migrating_to_async.rst:254
msgid "The following parameters are now exclusively keyword arguments:"
msgstr ""

#: ../../migrating_to_async.rst:256
msgid ":meth:`Client.send_message`"
msgstr ""

#: ../../migrating_to_async.rst:257
msgid "``tts``"
msgstr ""

#: ../../migrating_to_async.rst:259
msgid ":meth:`Client.logs_from`"
msgstr ""

#: ../../migrating_to_async.rst:259
msgid "``before``"
msgstr ""

#: ../../migrating_to_async.rst:260
msgid "``after``"
msgstr ""

#: ../../migrating_to_async.rst:262
msgid "``allow``"
msgstr ""

#: ../../migrating_to_async.rst:263
msgid "``deny``"
msgstr ""

#: ../../migrating_to_async.rst:265
msgid ""
"In the documentation you can tell if a function parameter is a forced "
"keyword argument if it is after ``\\*,`` in the function signature."
msgstr ""

#: ../../migrating_to_async.rst:271
msgid "Running the Client"
msgstr ""

#: ../../migrating_to_async.rst:273
msgid ""
"In earlier versions of discord.py, ``client.run()`` was a blocking call "
"to the main thread that called it. In v0.10.0 it is still a blocking call"
" but it handles the event loop for you. However, in order to do that you "
"must pass in your credentials to :meth:`Client.run`."
msgstr ""

#: ../../migrating_to_async.rst:277
msgid "Basically, before:"
msgstr ""

#: ../../migrating_to_async.rst:292
msgid ""
"Like in the older ``Client.run`` function, the newer one must be the one "
"of the last functions to call. This is because the function is "
"**blocking**. Registering events or doing anything after "
":meth:`Client.run` will not execute until the function returns."
msgstr ""

#: ../../migrating_to_async.rst:297
msgid ""
"This is a utility function that abstracts the event loop for you. There's"
" no need for the run call to be blocking and out of your control. Indeed,"
" if you want control of the event loop then doing so is quite "
"straightforward:"
msgstr ""

